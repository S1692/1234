"""Repository layer for accessing items in the database."""

from typing import List, Optional

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..models.item import Item


class ItemRepository:
    """Provides CRUD operations for Item entities."""

    async def get_all(self, session: AsyncSession) -> List[Item]:
        result = await session.execute(select(Item).order_by(Item.id))
        return result.scalars().all()

    async def create(self, session: AsyncSession, name: str) -> Item:
        item = Item(name=name)
        session.add(item)
        await session.commit()
        # Refresh to load autogenerated fields
        await session.refresh(item)
        return item

    async def delete(self, session: AsyncSession, item_id: int) -> Optional[Item]:
        result = await session.execute(select(Item).where(Item.id == item_id))
        item = result.scalar_one_or_none()
        if item is None:
            return None
        await session.delete(item)
        await session.commit()
        return item
